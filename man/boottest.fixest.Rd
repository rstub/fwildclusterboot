% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boottest_fixest.R
\name{boottest.fixest}
\alias{boottest.fixest}
\title{Conducts wild cluster bootstrap inference for object of class fixest.}
\usage{
\method{boottest}{fixest}(
  object,
  clustid,
  param,
  B,
  bootcluster = "max",
  fe = NULL,
  sign_level = NULL,
  conf_int = NULL,
  seed = NULL,
  beta0 = 0,
  type = "rademacher",
  impose_null = TRUE,
  p_val_type = "two-tailed",
  ...
)
}
\arguments{
\item{object}{An object of class fixest. Note: advanced formula tools in fixest or vectorized formulas are currently not supported.}

\item{clustid}{A vector with the clusters}

\item{param}{The univariate coefficients for which a hypothesis is to be tested}

\item{B}{number of bootstrap iterations}

\item{bootcluster}{A character vector. Sets the cluster used in the boottest. Chooses the largest cluster by default}

\item{fe}{A character scalar. Fixed effect to be projected out in the bootstrap}

\item{sign_level}{A numeric between 0 and 1. E.g. sign_level = 0.05 returns 0.95\% confidence intervals. By default, sign_level = 0.05.}

\item{conf_int}{A logical vector. If TRUE, boottest computes confidence intervals by p-value inversion}

\item{seed}{An integer. Allows the user to set a random seed}

\item{beta0}{A numeric. Shifts the null hypothesis}

\item{type}{character or function. The character string specifies the type of boostrap to use: One of "rademacher", "mammen", "norm" and "webb". Alternatively, type can be a function(n) for drawing wild bootstrap factors. "rademacher" by default.}

\item{impose_null}{Logical. Controls if the null hypothesis is imposed on the bootstrap dgp or not. Null imposed - WCR - by default. If FALSE, unrestricted WCU}

\item{p_val_type}{type Type of p-value. By default "two-tailed". Other options: "equal-tailed"}

\item{...}{Further arguments passed to or from other methods.}
}
\value{
An object of class \code{boottest}
\item{p_val}{The bootstrap p-value.}
\item{t_stat}{The bootstrap t-statistic.}
\item{conf_int}{The bootstrap confidence interval.}
\item{param}{The tested parameter.}
\item{N}{Sample size. Might differ from the regression sample size if the cluster variables contain NA values.}
\item{B}{Number of Bootstrap Iterations.}
\item{clustid}{Names of the cluster Variables.}
\item{N_G}{Dimension of the cluster variables as used in boottest.}
\item{sign_level}{Significance sign_level used in boottest.}
\item{type}{Distribution of the bootstrap weights.}
\item{p_test_vals}{All p-values calculated while calculating the confidence interval.}
\item{test_vals}{All t-statistics calculated while calculating the confidence interval.}
\item{regression}{The regression object used in boottest.}
\item{call}{Function call of boottest.}
}
\description{
Conducts wild cluster bootstrap inference for object of class fixest.
}
\section{Confidence Intervals}{

\code{boottest} computes confidence intervals by inverting p-values. In practice, the following procedure is used:
\itemize{
\item Based on an initial guess for starting values, calculate p-values for 26 equal spaced points between the starting values.
\item Out of the 26 calculated p-values, find the two pairs of values x for which the corresponding p-values px cross the significance sign_level sign_level.
\item Feed the two pairs of x into an numerical root finding procedure and solve for the root. boottest currently relies on \code{stats::uniroot} and sets an absolute tolerance of 1e-06 and stops the procedure after 10 iterations.
}
Note that confidence intervals computed via \code{boottest.fixest} sometimes slightly differ from confidence intervals calculated
via \code{boottest.lm} or \code{boottest.felm}. This is due to different initial guesses for starting values. \code{boottest.lm} uses inflated cluster robust
standard errors calculated via the \code{sandwich} package, while \code{boottest.felm} and \code{boottest.fixest} use different small-sample bias
correction methods for calculating cluster standard errors internally. Slightly different starting values hence lead to slightly different
confidence intervals.
}

\section{Standard Errors}{

\code{boottest} does not calculate standard errors.
}

\examples{
library(fwildclusterboot)
library(fixest)
voters <- create_data_2(N = 10000, N_G1 = 20, icc1 = 0.91, N_G2 = 10,
                       icc2 = 0.51, numb_fe1 = 10, numb_fe2 = 10, seed = 12345)
feols_fit <-feols(proposition_vote ~ treatment + ideology1 + log_income,
           fixef =  "Q1_immigration", data = voters)
boot1 <- boottest(feols_fit, B = 10000, param = "treatment", clustid = "group_id1")
boot2 <- boottest(feols_fit, B = 10000, param = "treatment", clustid = c("group_id1", "group_id2"))
boot3 <- boottest(feols_fit, B = 10000, param = "treatment", clustid = c("group_id1", "group_id2"),
                 fe = "Q1_immigration")
boot4 <- boottest(feols_fit, B = 10000, param = "treatment", clustid = c("group_id1", "group_id2"),
fe = "Q1_immigration", sign_level = 0.2, seed = 8, beta0 = 2)
summary(boot1)
tidy(boot1)
plot(boot1)
}
\references{
Roodman et al., 2019, "Fast and wild: Bootstrap inference in Stata using boottest", The Stata Journal. (\url{https://journals.sagepub.com/doi/full/10.1177/1536867X19830877})
}
