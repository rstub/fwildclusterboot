boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
tidy(boot_lm)
summary(boot_lm)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::document("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::document("fwildclusterboot")
library(fwildclusterboot)
B <- 1000
seed <- 421
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 50, icc = 0.01)
head(voters)
library(lfe)
library(fixest)
# 1) boottest based on object of class lm
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
# 2) boottest based on object of class fixest
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
feols_fit2 <- feols(proposition_vote ~ treatment + ideology + log_income + as.factor(Q1_immigration), weights = NULL, data = voters)
# 3) bootest based on object of class felm
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::document("fwildclusterboot")
# setwd("C:/Users/alexa/Dropbox")
# devtools::install("fwildclusterboot")
# devtools::document("fwildclusterboot")
# devtools::check("fwildclusterboot")
#
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("fixest", type = "Imports")
#  use_package("estimatr", type = "Imports")
# execute all functions in fwildclusterboot
# setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
# file.sources = list.files(pattern="*.R")
# sapply(file.sources, source, .GlobalEnv)
# library(data.table)
library(fwildclusterboot)
B <- 1000
seed <- 421
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 50, icc = 0.01)
head(voters)
library(lfe)
library(fixest)
# 1) boottest based on object of class lm
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
# 2) boottest based on object of class fixest
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
feols_fit2 <- feols(proposition_vote ~ treatment + ideology + log_income + as.factor(Q1_immigration), weights = NULL, data = voters)
# 3) bootest based on object of class felm
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
tidy(boot_lm)
summary(boot_lm)
library(rbenchmark)
library(boot)
library(fwildclusterboot)
library(fixest)
library(multiwayvcov)
options(boot.ncpus = 4)
benchmark_boottest <- function(n, b, n_g, replications){
voters <- create_data_1(N = n, N_G = n_g, icc = 0.01)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
bench <-
benchmark(
multiway = cluster.boot(lm_fit, cluster = voters$group_id, parallel = FALSE, R = b, wild_type = "rademacher"),
multiway_parallel = cluster.boot(lm_fit, cluster = voters$group_id, parallel = TRUE, R = b, wild_type = "rademacher"),
boottest_lm = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment"),
boottest_feols = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment"),
#boottest_lm_p_val = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
#boottest_feols_p_val = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
replications = replications
)
bench
}
set.seed(768)
bech_boottest <- benchmark_boottest(n = 10000, b = 10000, n_g = 20, replications = 1)
bench_boottest <- benchmark_boottest(n = 10000, b = 10000, n_g = 20, replications = 1)
bench_boottest <- benchmark_boottest(n = 10000, b = 10000, n_g = 40, replications = 1)
bench_boottest
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
benchmark_boottest <- function(n, b, n_g, times){
voters <- create_data_1(N = n, N_G = n_g, icc = 0.01)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
bench <-
microbenchmark(
multiway = cluster.boot(lm_fit, cluster = voters$group_id, parallel = FALSE, R = b, wild_type = "rademacher"),
multiway_parallel = cluster.boot(lm_fit, cluster = voters$group_id, parallel = TRUE, R = b, wild_type = "rademacher"),
boottest_lm = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment"),
boottest_feols = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment"),
#boottest_lm_p_val = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
#boottest_feols_p_val = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
times = replications
)
bench
}
set.seed(768)
getwd()
saveRDS(bench_boottest, "C:/Users/alexa/Dropbox/fwildclusterboot/benchmarks/bench_boottest.rds")
readRDS("C:/Users/alexa/Dropbox/fwildclusterboot/benchmarks/bench_boottest.rds")
benchmark_boottest <- function(n, b, n_g, times){
voters <- create_data_1(N = n, N_G = n_g, icc = 0.01)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
bench <-
microbenchmark(
multiway = cluster.boot(lm_fit, cluster = voters$group_id, parallel = FALSE, R = b, wild_type = "rademacher"),
multiway_parallel = cluster.boot(lm_fit, cluster = voters$group_id, parallel = TRUE, R = b, wild_type = "rademacher"),
boottest_lm = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment"),
boottest_feols = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment"),
#boottest_lm_p_val = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
#boottest_feols_p_val = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
times = replications
)
bench
}
set.seed(768)
bench_boottest <- benchmark_boottest(n = 10000, b = 10000, n_g = 40, times = 10)
benchmark_boottest <- function(n, b, n_g, times){
voters <- create_data_1(N = n, N_G = n_g, icc = 0.01)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
bench <-
microbenchmark(
multiway = cluster.boot(lm_fit, cluster = voters$group_id, parallel = FALSE, R = b, wild_type = "rademacher"),
multiway_parallel = cluster.boot(lm_fit, cluster = voters$group_id, parallel = TRUE, R = b, wild_type = "rademacher"),
boottest_lm = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment"),
boottest_feols = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment"),
#boottest_lm_p_val = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
#boottest_feols_p_val = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
times = times
)
bench
}
set.seed(768)
bench_boottest <- benchmark_boottest(n = 10000, b = 10000, n_g = 40, times = 10)
saveRDS(bench_boottest, "C:/Users/alexa/Dropbox/fwildclusterboot/benchmarks/bench_boottest.rds")
readRDS("C:/Users/alexa/Dropbox/fwildclusterboot/benchmarks/bench_boottest.rds")
benchmark_boottest <- function(n, b, n_g, replications){
voters <- create_data_1(N = n, N_G = n_g, icc = 0.01)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
bench <-
benchmark(
multiway = cluster.boot(lm_fit, cluster = voters$group_id, parallel = FALSE, R = b, wild_type = "rademacher"),
multiway_parallel = cluster.boot(lm_fit, cluster = voters$group_id, parallel = TRUE, R = b, wild_type = "rademacher"),
boottest_lm = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment"),
boottest_feols = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment"),
#boottest_lm_p_val = boottest(lm_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
#boottest_feols_p_val = boottest(feols_fit, clustid = voters$group_id, B = b, param = "treatment", conf_int = FALSE),
replications = replications
)
bench
}
set.seed(768)
bench_boottest <- benchmark_boottest(n = 10000, b = 10000, n_g = 40, replications = 10)
saveRDS(bench_boottest, "C:/Users/alexa/Dropbox/fwildclusterboot/benchmarks/bench_boottest.rds")
bench_boottest
tidy <- function(x, ...){
#'@export
UseMethod("tidy", x)
}
summary <- function(x, ...){
#'@export
UseMethod("summary", x)
}
tidy.boottest <- function(object){
#'@export
#'@method tidy boottest
if(class(object$regression) == "felm"){
estimate <- object$regression$coefficients[rownames(object$regression$coefficients) == object$param]
} else{
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
}
t_stat <- object$t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
#rownames(res) <- NA
return(res)
}
summary.boottest <- function(object, digits = 3){
#'@export
#'@method summary boottest
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
#if(class(object$regression) %in% c("lm", "lm_robust", "felm")){
#  adj_r_squared <- summary(object$regression)$adj.r.squared
#} else{
#  adj_r_squared <- NA
#}
tidy_object <- round(tidy(object), digits)
#treatment_name <- rownames(tidy_object)
#tidy_object <- as.data.frame(round(tidy_object, digits = 3))
#rownames(tidy_object) <- treatment_name
cat("\t\n",
sprintf("OLS estimation, Dep.Var: %s\n", depvar),
sprintf("Estimation Function: %s\n", estim_function),
sprintf("Observations:%s\n", N),
sprintf("Standard-errors: Clustered  %s\n", ""),
sprintf("Number of Clusters:  %s\n", numb_clusters),
#sprintf("Adj. R-Squared: %s\n", round(adj_r_squared,6)),
sprintf("%s\n", ""))
return(tidy_object)
}
# setwd("C:/Users/alexa/Dropbox")
# devtools::install("fwildclusterboot")
# devtools::document("fwildclusterboot")
# devtools::check("fwildclusterboot")
#
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("fixest", type = "Imports")
#  use_package("estimatr", type = "Imports")
# execute all functions in fwildclusterboot
# setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
# file.sources = list.files(pattern="*.R")
# sapply(file.sources, source, .GlobalEnv)
# library(data.table)
library(fwildclusterboot)
B <- 1000
seed <- 4218
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 50, icc = 0.01)
head(voters)
library(lfe)
library(fixest)
# 1) boottest based on object of class lm
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
# 2) boottest based on object of class fixest
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
feols_fit2 <- feols(proposition_vote ~ treatment + ideology + log_income + as.factor(Q1_immigration), weights = NULL, data = voters)
# 3) bootest based on object of class felm
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
tidy(boot_lm)
summary(boot_lm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(devtools)
#install_github("al_fisc/fwildclusterboot")
# setwd("C:/Users/alexa/Dropbox")
# devtools::install("fwildclusterboot")
# devtools::document("fwildclusterboot")
# devtools::check("fwildclusterboot")
#
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("fixest", type = "Imports")
#  use_package("estimatr", type = "Imports")
# execute all functions in fwildclusterboot
# setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
# file.sources = list.files(pattern="*.R")
# sapply(file.sources, source, .GlobalEnv)
# library(data.table)
library(fwildclusterboot)
B <- 1000
seed <- 4218
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 50, icc = 0.01)
head(voters)
library(lfe)
library(fixest)
# 1) boottest based on object of class lm
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
# 2) boottest based on object of class fixest
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
feols_fit2 <- feols(proposition_vote ~ treatment + ideology + log_income + as.factor(Q1_immigration), weights = NULL, data = voters)
# 3) bootest based on object of class felm
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(devtools)
#install_github("al_fisc/fwildclusterboot")
# setwd("C:/Users/alexa/Dropbox")
# devtools::install("fwildclusterboot")
# devtools::document("fwildclusterboot")
# devtools::check("fwildclusterboot")
#
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("fixest", type = "Imports")
#  use_package("estimatr", type = "Imports")
# execute all functions in fwildclusterboot
# setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
# file.sources = list.files(pattern="*.R")
# sapply(file.sources, source, .GlobalEnv)
# library(data.table)
library(fwildclusterboot)
B <- 1000
seed <- 4218
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 50, icc = 0.01)
head(voters)
library(lfe)
library(fixest)
# 1) boottest based on object of class lm
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
# 2) boottest based on object of class fixest
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
feols_fit2 <- feols(proposition_vote ~ treatment + ideology + log_income + as.factor(Q1_immigration), weights = NULL, data = voters)
# 3) bootest based on object of class felm
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(devtools)
#install_github("al_fisc/fwildclusterboot")
# setwd("C:/Users/alexa/Dropbox")
# devtools::install("fwildclusterboot")
# devtools::document("fwildclusterboot")
# devtools::check("fwildclusterboot")
#
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("fixest", type = "Imports")
#  use_package("estimatr", type = "Imports")
# execute all functions in fwildclusterboot
# setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
# file.sources = list.files(pattern="*.R")
# sapply(file.sources, source, .GlobalEnv)
# library(data.table)
library(fwildclusterboot)
B <- 1000
seed <- 4218
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 50, icc = 0.01)
head(voters)
library(lfe)
library(fixest)
# 1) boottest based on object of class lm
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters)
# 2) boottest based on object of class fixest
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
feols_fit2 <- feols(proposition_vote ~ treatment + ideology + log_income + as.factor(Q1_immigration), weights = NULL, data = voters)
# 3) bootest based on object of class felm
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# 1) boottest based on object of class lm
boot_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
# 2) bootest based on object of class feols
boot_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# boot_fixest2 = boottest(feols_fit2, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE, beta = 0)
# 3) boottest based on object of class felm
boot_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
boot_felm1 = boottest(felm_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
tidy(boot_lm)
summary(boot_lm)
# setwd("C:/Users/alexa/Dropbox")
# devtools::install("fwildclusterboot")
# devtools::document("fwildclusterboot")
# devtools::check("fwildclusterboot")
#
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("fixest", type = "Imports")
#  use_package("estimatr", type = "Imports")
# execute all functions in fwildclusterboot
setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
file.sources = list.files(pattern="*.R")
sapply(file.sources, source, .GlobalEnv)
# library(data.table)
# setwd("C:/Users/alexa/Dropbox")
# devtools::install("fwildclusterboot")
# devtools::document("fwildclusterboot")
# devtools::check("fwildclusterboot")
#
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("fixest", type = "Imports")
#  use_package("estimatr", type = "Imports")
# execute all functions in fwildclusterboot
setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
file.sources = list.files(pattern="*.R")
sapply(file.sources, source, .GlobalEnv)
# library(data.table)
library(fwildclusterboot)
B <- 1000
seed <- 4218
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 50, icc = 0.01)
