if (inherits(cluster, "formula")) {
cluster_tmp <- expand.model.frame(model, cluster, na.expand = FALSE)
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
}
else {
cluster <- as.data.frame(cluster, stringsAsFactors = FALSE)
}
cluster_dims <- ncol(cluster)
tcc <- 2^cluster_dims - 1
acc <- list()
for (i in 1:cluster_dims) {
acc <- append(acc, combn(1:cluster_dims, i, simplify = FALSE))
}
if (debug){print(acc)}
acc <- acc[-1:-cluster_dims]
if(debug){print(acc)}
if (!is.null(model$na.action)) {
if (class(model$na.action) == "exclude") {
cluster <- cluster[-model$na.action, ]
}
else if (class(model$na.action) == "omit") {
cluster <- cluster[-model$na.action, ]
}
cluster <- as.data.frame(cluster)
}
if (debug)
print(class(cluster))
i <- !sapply(cluster, is.numeric)
cluster[i] <- lapply(cluster[i], as.character)
if (cluster_dims > 1) {
for (i in acc) {
cluster <- cbind(cluster, Reduce(paste0, cluster[,
i]))
}
}
cluster
}
head(preprocess_clusters_mwvcov(lm_fit, ~firmid + year))
sapply(preprocess_clusters_mwvcov(lm_fit, ~firmid + year), class)
cluster.vcov
# gen process
set.seed(42)
nn = 10
n1 = 3
x <- rnorm(nn)
f1 <- sample(n1, length(x), replace=TRUE)
y <- 2.13*x + cos(f1) + rnorm(length(x), sd=0.5)
# felm
est <- lfe::felm(y ~ x | f1 | 0 | f1)
resultfelm <- summary(est)
resultfelm$coefficients[2] # get cluster s.e.
resultfelm
# sandwich
sandwich::vcovCL(est, cluster = ~f1) %>% sqrt(.)
# sandwich
sandwich::vcovCL(est, cluster = ~f1)
methods(class = class(x))
methods(class = class(est))
vcov(felm)
vcov(est)
coeftest(est, vcov(est))
resultfelm
methods(class = class(est))
# felm
fit_felm <- lfe::felm(y ~ x | f1 | 0 | f1)
res_felm <- summary(fit_felm)
# lm
fit_lm <- lm(y ~ x + as.factor(x1))
# lm
fit_lm <- lm(y ~ x + as.factor(f1))
res_felm
sandwich::vcovCL(lm_fit, cluster = ~f1)
# gen process
set.seed(42)
nn = 10
n1 = 3
x <- rnorm(nn)
f1 <- sample(n1, length(x), replace=TRUE)
y <- 2.13*x + cos(f1) + rnorm(length(x), sd=0.5)
# felm
fit_felm <- lfe::felm(y ~ x | f1 | 0 | f1)
res_felm <- summary(fit_felm)
# lm
fit_lm <- lm(y ~ x + as.factor(f1))
res_felm
sandwich::vcovCL(lm_fit, cluster = ~f1)
# lm
fit_lm <- lm(y ~ x + as.factor(f1))
res_felm
sandwich::vcovCL(fit_lm)
coeftest(fit_lm, ~f1)
coeftest(fit_lm, vcovCL(fit_lm, ~f1))
# gen process
library(lfe)
library(sandwich)
# felm
fit_felm <- lfe::felm(y ~ x | f1 | 0 | f1)
res_felm <- summary(fit_felm)
# lm
fit_lm <- lm(y ~ x + as.factor(f1))
res_felm
coeftest(fit_lm, vcovCL(fit_lm, ~f1))
library(fixest)
install.packages("fixest")
library(sandwich)
library(multiwayvcov)
library(lmtest)
data("petersen")
lm_fit <- lm(y ~ x, data = petersen)
coeftest(lm_fit, cluster.vcov(model = lm_fit, cluster = ~firmid + year))
library(sandwich)
# t test of coefficients:
#
#            Estimate Std. Error t value Pr(>|t|)
# (Intercept) 0.029680   0.065066  0.4561   0.6483
# x           1.034833   0.053561 19.3206   <2e-16 ***
# ---
# Signif. codes:
# 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
coeftest(lm_fit, vcovCL(model = lm_fit,cluster = ~firmid + year ))
library(sandwich)
library(multiwayvcov)
library(lmtest)
data("petersen")
lm_fit <- lm(y ~ x, data = petersen)
coeftest(lm_fit, cluster.vcov(model = lm_fit, cluster = ~firmid + year))
# t test of coefficients:
#
#            Estimate Std. Error t value Pr(>|t|)
# (Intercept) 0.029680   0.065066  0.4561   0.6483
# x           1.034833   0.053561 19.3206   <2e-16 ***
# ---
# Signif. codes:
# 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
coeftest(lm_fit, vcovCL(model = lm_fit,cluster = ~firmid + year ))
# t test of coefficients:
#
#            Estimate Std. Error t value Pr(>|t|)
# (Intercept) 0.029680   0.065066  0.4561   0.6483
# x           1.034833   0.053561 19.3206   <2e-16 ***
# ---
# Signif. codes:
# 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
coeftest(lm_fit, vcovCL(x = lm_fit,cluster = ~firmid + year ))
petersen[1, "year"] <- NA
petersen[2, "firmid"] <- NA
lm_fit2<- lm(y ~ x, data = petersen)
# with multiwayvcov
coeftest(lm_fit2, cluster.vcov(model = lm_fit2, cluster = ~firmid + year))
# with sandwich
coeftest(lm_fit2, vcovCL(x = lm_fit2,cluster = ~firmid + year ))
# with sandwich
coeftest(lm_fit2, vcovCL(x = lm_fit2, cluster = ~firmid + year ))
# with sandwich
coeftest(lm_fit2, vcovCL(x = lm_fit2, cluster = ~ firmid + year ))
# with multiwayvcov
coeftest(lm_fit2, cluster.vcov(model = lm_fit2, cluster = ~firmid + year))
# with sandwich
coeftest(lm_fit2, vcovCL(x = lm_fit2, cluster = ~ firmid + year ))
x <- lm_fit
cluster <- ~ firmid + year
is.list(x)
!is.null(x$na.action)
if (is.list(x) && !is.null(x$na.action)) class(x$na.action) <- "omit"
x$na.action
if (is.list(x) && !is.null(x$na.action)) class(x$na.action) <- "omit"
class(x$na.action)
ef <- estfun(x, ...)
k <- NCOL(ef)
n <- NROW(ef)
k = 1
## cluster can either be supplied explicitly or
## be an attribute of the model...FIXME: other specifications?
if (is.null(cluster)) cluster <- attr(x, "cluster")
is.null(cluster)
## cluster can either be supplied explicitly or
## be an attribute of the model...FIXME: other specifications?
if (is.null(cluster)) cluster <- attr(x, "cluster")
## resort to cross-section if no clusters are supplied
if (is.null(cluster)) cluster <- 1L:n
is.null(cluster)
cluster_tmp <- if("Formula" %in% loadedNamespaces()) { ## FIXME to suppress potential warnings due to | in Formula
suppressWarnings(expand.model.frame(x, cluster, na.expand = FALSE))
} else {
expand.model.frame(x, cluster, na.expand = FALSE)
}
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
cluster
## collect 'cluster' variables in a data frame
if(inherits(cluster, "formula")) {
cluster_tmp <- if("Formula" %in% loadedNamespaces()) { ## FIXME to suppress potential warnings due to | in Formula
suppressWarnings(expand.model.frame(x, cluster, na.expand = FALSE))
} else {
expand.model.frame(x, cluster, na.expand = FALSE)
}
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
} else {
cluster <- as.data.frame(cluster)
}
head(cluster)
head(lm_fit$call$data)
(lm_fit$call$data)
nrow(cluster)
is.null(x$na.action)
class(x$na.action)
class(x$na.action) <- "exclude"
class(x$na.action) <- "omit"
class(x$na.action)
x$na.action
preprocess_cluster_sandwich(x = lm_fit2, cluster = ~ firmid + year)
preprocess_cluster_sandwich <- function(x, cluster){
if (is.list(x) && !is.null(x$na.action)) class(x$na.action) <- "omit"
ef <- estfun(x, ...)
k <- NCOL(ef)
n <- NROW(ef)
## set up return value with correct dimension and names
rval <- matrix(0, nrow = k, ncol = k,
dimnames = list(colnames(ef), colnames(ef)))
## cluster can either be supplied explicitly or
## be an attribute of the model...FIXME: other specifications?
if (is.null(cluster)) cluster <- attr(x, "cluster")
## resort to cross-section if no clusters are supplied
if (is.null(cluster)) cluster <- 1L:n
## collect 'cluster' variables in a data frame
if(inherits(cluster, "formula")) {
cluster_tmp <- if("Formula" %in% loadedNamespaces()) { ## FIXME to suppress potential warnings due to | in Formula
suppressWarnings(expand.model.frame(x, cluster, na.expand = FALSE))
} else {
expand.model.frame(x, cluster, na.expand = FALSE)
}
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
} else {
cluster <- as.data.frame(cluster)
}
## handle omitted or excluded observations
if((n != NROW(cluster)) && !is.null(x$na.action) && (class(x$na.action) %in% c("exclude", "omit"))) {
cluster <- cluster[-x$na.action, , drop = FALSE]
}
if(NROW(cluster) != n) stop("number of observations in 'cluster' and 'estfun()' do not match")
}
preprocess_cluster_sandwich(x = lm_fit2, cluster = ~ firmid + year)
preprocess_cluster_sandwich(lm_fit2, cluster = ~ firmid + year)
?estfun.lm
estfun(lm_fit)
cluster <- ~ firmid + year
preprocess_cluster_sandwich <- function(x, cluster, ...){
if (is.list(x) && !is.null(x$na.action)) class(x$na.action) <- "omit"
ef <- estfun(x, ...)
k <- NCOL(ef)
n <- NROW(ef)
## set up return value with correct dimension and names
rval <- matrix(0, nrow = k, ncol = k,
dimnames = list(colnames(ef), colnames(ef)))
## cluster can either be supplied explicitly or
## be an attribute of the model...FIXME: other specifications?
if (is.null(cluster)) cluster <- attr(x, "cluster")
## resort to cross-section if no clusters are supplied
if (is.null(cluster)) cluster <- 1L:n
## collect 'cluster' variables in a data frame
if(inherits(cluster, "formula")) {
cluster_tmp <- if("Formula" %in% loadedNamespaces()) { ## FIXME to suppress potential warnings due to | in Formula
suppressWarnings(expand.model.frame(x, cluster, na.expand = FALSE))
} else {
expand.model.frame(x, cluster, na.expand = FALSE)
}
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
} else {
cluster <- as.data.frame(cluster)
}
## handle omitted or excluded observations
if((n != NROW(cluster)) && !is.null(x$na.action) && (class(x$na.action) %in% c("exclude", "omit"))) {
cluster <- cluster[-x$na.action, , drop = FALSE]
}
if(NROW(cluster) != n) stop("number of observations in 'cluster' and 'estfun()' do not match")
}
preprocess_cluster_sandwich(lm_fit2, cluster = ~ firmid + year)
preprocess_cluster_sandwich <- function(x, cluster, ...){
if (is.list(x) && !is.null(x$na.action)) class(x$na.action) <- "omit"
ef <- estfun(x, ...)
k <- NCOL(ef)
n <- NROW(ef)
## set up return value with correct dimension and names
rval <- matrix(0, nrow = k, ncol = k,
dimnames = list(colnames(ef), colnames(ef)))
## cluster can either be supplied explicitly or
## be an attribute of the model...FIXME: other specifications?
if (is.null(cluster)) cluster <- attr(x, "cluster")
## resort to cross-section if no clusters are supplied
if (is.null(cluster)) cluster <- 1L:n
## collect 'cluster' variables in a data frame
if(inherits(cluster, "formula")) {
cluster_tmp <- if("Formula" %in% loadedNamespaces()) { ## FIXME to suppress potential warnings due to | in Formula
suppressWarnings(expand.model.frame(x, cluster, na.expand = FALSE))
} else {
expand.model.frame(x, cluster, na.expand = FALSE)
}
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
} else {
cluster <- as.data.frame(cluster)
}
## handle omitted or excluded observations
if((n != NROW(cluster)) && !is.null(x$na.action) && (class(x$na.action) %in% c("exclude", "omit"))) {
cluster <- cluster[-x$na.action, , drop = FALSE]
}
if(NROW(cluster) != n) stop("number of observations in 'cluster' and 'estfun()' do not match")
return(cluster)
}
preprocess_cluster_sandwich(lm_fit2, cluster = ~ firmid + year)
test1 <- preprocess_cluster_sandwich(lm_fit, cluster = ~ firmid + year)
test2 <- preprocess_cluster_sandwich(lm_fit2, cluster = ~ firmid + year)
dim(test1)
dim(test2)
head(test1)
head(test2)
sapply(class, test2)
test2
class(test2)
sapply(test2, class)
lm_fit2<- lm(y ~ x, data = petersen)
# with multiwayvcov
coeftest(lm_fit2, cluster.vcov(model = lm_fit2, cluster = ~firmid + year))
# with sandwich
coeftest(lm_fit2, vcovCL(x = lm_fit2, cluster = ~ firmid + year ))
# with sandwich
coeftest(lm_fit, vcovCL(x = lm_fit,cluster = ~firmid + year ))
# with sandwich
coeftest(lm_fit2, vcovCL(x = lm_fit2, cluster = ~ firmid + year ))
data("petersen")
petersen <- petersen[1:200, ]
lm_fit <- lm(y ~ x, data = petersen)
# with multiwayvcov
coeftest(lm_fit, cluster.vcov(model = lm_fit, cluster = ~firmid + year))
# with sandwich
coeftest(lm_fit, vcovCL(x = lm_fit,cluster = ~firmid + year ))
library(sandwich)
library(multiwayvcov)
library(lmtest)
data("petersen")
petersen <- petersen[1:200, ]
lm_fit <- lm(y ~ x, data = petersen)
# with multiwayvcov
no_missings_mvcov <- coeftest(lm_fit, cluster.vcov(model = lm_fit, cluster = ~firmid + year))
# with sandwich
no_missings_sw <- coeftest(lm_fit, vcovCL(x = lm_fit,cluster = ~firmid + year ))
petersen[1, "year"] <- NA
petersen[2, "firmid"] <- NA
lm_fit2<- lm(y ~ x, data = petersen)
# with multiwayvcov
missings_mvcov <- coeftest(lm_fit2, cluster.vcov(model = lm_fit2, cluster = ~firmid + year))
# with sandwich
missings_sandwich <- coeftest(lm_fit2, vcovCL(x = lm_fit2, cluster = ~ firmid + year ))
preprocess_clusters_mwvcov <- function(model, cluster, debug = FALSE){
if (inherits(cluster, "formula")) {
cluster_tmp <- expand.model.frame(model, cluster, na.expand = FALSE)
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
}
else {
cluster <- as.data.frame(cluster, stringsAsFactors = FALSE)
}
cluster_dims <- ncol(cluster)
tcc <- 2^cluster_dims - 1
acc <- list()
for (i in 1:cluster_dims) {
acc <- append(acc, combn(1:cluster_dims, i, simplify = FALSE))
}
if (debug){print(acc)}
acc <- acc[-1:-cluster_dims]
if(debug){print(acc)}
if (!is.null(model$na.action)) {
if (class(model$na.action) == "exclude") {
cluster <- cluster[-model$na.action, ]
}
else if (class(model$na.action) == "omit") {
cluster <- cluster[-model$na.action, ]
}
cluster <- as.data.frame(cluster)
}
if (debug)
print(class(cluster))
i <- !sapply(cluster, is.numeric)
cluster[i] <- lapply(cluster[i], as.character)
if (cluster_dims > 1) {
for (i in acc) {
cluster <- cbind(cluster, Reduce(paste0, cluster[,
i]))
}
}
cluster
}
# compare multiwayvcov
no_missings_mvcov
missings_mvcov
t test of coefficients:
#   Estimate Std. Error t value  Pr(>|t|)
# (Intercept) -0.26823    0.34145 -0.7856 0.4330687
# x            0.91004    0.23183  3.9254 0.0001194 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# t test of coefficients:
#
#   Estimate Std. Error t value  Pr(>|t|)
# (Intercept) -0.26823    0.33627 -0.7977     0.426
# x            0.91004    0.22839  3.9847 9.493e-05 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# compare sandwich
no_missings_sw
missings_sw
# with sandwich
missings_sw <- coeftest(lm_fit2, vcovCL(x = lm_fit2, cluster = ~ firmid + year ))
t test of coefficients:
#   Estimate Std. Error t value  Pr(>|t|)
# (Intercept) -0.26823    0.34145 -0.7856 0.4330687
# x            0.91004    0.23183  3.9254 0.0001194 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# t test of coefficients:
#
#   Estimate Std. Error t value  Pr(>|t|)
# (Intercept) -0.26823    0.33627 -0.7977     0.426
# x            0.91004    0.22839  3.9847 9.493e-05 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# compare sandwich
no_missings_sw
missings_sw
# compare multiwayvcov
no_missings_mvcov
missings_mvcov
preprocess_clusters_mwvcov <- function(model, cluster, debug = FALSE){
if (inherits(cluster, "formula")) {
cluster_tmp <- expand.model.frame(model, cluster, na.expand = FALSE)
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
}
else {
cluster <- as.data.frame(cluster, stringsAsFactors = FALSE)
}
cluster_dims <- ncol(cluster)
tcc <- 2^cluster_dims - 1
acc <- list()
for (i in 1:cluster_dims) {
acc <- append(acc, combn(1:cluster_dims, i, simplify = FALSE))
}
if (debug){print(acc)}
acc <- acc[-1:-cluster_dims]
if(debug){print(acc)}
if (!is.null(model$na.action)) {
if (class(model$na.action) == "exclude") {
cluster <- cluster[-model$na.action, ]
}
else if (class(model$na.action) == "omit") {
cluster <- cluster[-model$na.action, ]
}
cluster <- as.data.frame(cluster)
}
if (debug)
print(class(cluster))
i <- !sapply(cluster, is.numeric)
cluster[i] <- lapply(cluster[i], as.character)
if (cluster_dims > 1) {
for (i in acc) {
cluster <- cbind(cluster, Reduce(paste0, cluster[,
i]))
}
}
cluster
}
head(preprocess_clusters_mwvcov(lm_fit, ~firmid + year))
sapply(preprocess_clusters_mwvcov(lm_fit, ~firmid + year), class)
preprocess_cluster_sandwich <- function(x, cluster, ...){
if (is.list(x) && !is.null(x$na.action)) class(x$na.action) <- "omit"
ef <- estfun(x, ...)
k <- NCOL(ef)
n <- NROW(ef)
## set up return value with correct dimension and names
rval <- matrix(0, nrow = k, ncol = k,
dimnames = list(colnames(ef), colnames(ef)))
## cluster can either be supplied explicitly or
## be an attribute of the model...FIXME: other specifications?
if (is.null(cluster)) cluster <- attr(x, "cluster")
## resort to cross-section if no clusters are supplied
if (is.null(cluster)) cluster <- 1L:n
## collect 'cluster' variables in a data frame
if(inherits(cluster, "formula")) {
cluster_tmp <- if("Formula" %in% loadedNamespaces()) { ## FIXME to suppress potential warnings due to | in Formula
suppressWarnings(expand.model.frame(x, cluster, na.expand = FALSE))
} else {
expand.model.frame(x, cluster, na.expand = FALSE)
}
cluster <- model.frame(cluster, cluster_tmp, na.action = na.pass)
} else {
cluster <- as.data.frame(cluster)
}
## handle omitted or excluded observations
if((n != NROW(cluster)) && !is.null(x$na.action) && (class(x$na.action) %in% c("exclude", "omit"))) {
cluster <- cluster[-x$na.action, , drop = FALSE]
}
if(NROW(cluster) != n) stop("number of observations in 'cluster' and 'estfun()' do not match")
return(cluster)
}
head(preprocess_cluster_sandwich(lm_fit2, cluster = ~ firmid + year))
# > head(preprocess_cluster_sandwich(lm_fit2, cluster = ~ firmid + year))
# firmid year
# 1      1   NA
# 2     NA    2
# 3      1    3
# 4      1    4
# 5      1    5
# 6      1    6
sapply(head(preprocess_cluster_sandwich(lm_fit2, cluster = ~ firmid + year)), class)
