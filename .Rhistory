treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
}
voters <- create_data(N = 2000, N_G = 20)
head(voters)
library(estimatr)
library(lfe)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
library(fwildclusterboot)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::document("fwildclusterboot")
# library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 2000, N_G = 20)
library(data.table)
library(multiwayvcov)
library(lmtest)
library(fabricatr)
library(rbenchmark)
library(fixest)
setwd("C:/Users/au563468/Dropbox/fwildclusterboot/R")
file.sources = list.files(pattern="*.R")
setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
file.sources = list.files(pattern="*.R")
sapply(file.sources, source, .GlobalEnv)
file.sources
source
sapply(file.sources, source, .GlobalEnv)
file.sources
setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
file.sources = list.files(pattern="*.R")
sapply(file.sources, source, .GlobalEnv)
# library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 2000, N_G = 20)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
lm
estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
#res_estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
#res_estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
res_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
#res_estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
#res_estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
res_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
N
dim(voters)
summary(res_lm)
#summary(res_estimatr_fe)
#summary(res_estimatr)
summary(res_felm)
voters <- create_data(N = 10000, N_G = 20)
head(voters)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
system.time(boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE))
system.time(boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE))
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
summary(res_lm)
summary(res_felm)
summary(res_fixest)
tidy(res_lm)
system.time(res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
)
system.time(res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
system.time(res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
)
system.time(res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE))
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::check("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
library(data.table)
library(multiwayvcov)
library(lmtest)
library(lmtest)
library(pracma)
library(fabricatr)
library(pracma)
library(fabricatr)
library(rbenchmark)
library(fixest)
# library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
#res_estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
#res_estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
res_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
#res_estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
#res_estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
res_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
tic()
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
toc()
tic()
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
toc()
summary(res_lm)
#summary(res_estimatr_fe)
#summary(res_estimatr)
summary(res_felm)
summary(res_fixest)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id)
summary(lm_robust_fit)
install.packages("vitae")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(vitae)
library(tibble)
tribble(
~ Degree, ~ Year, ~ Institution, ~ Where,
"Informal studies", "1889-91", "Flying University", "Warsaw, Poland",
"Master of Physics", "1893", "Sorbonne Université", "Paris, France",
"Master of Mathematics", "1894", "Sorbonne Université", "Paris, France"
) %>%
detailed_entries(Degree, Year, Institution, Where)
tribble(
~Year, ~Type, ~Desc,
1903, "Physics", "Awarded for her work on radioactivity with Pierre Curie and Henri Becquerel",
1911, "Chemistry", "Awarded for the discovery of radium and polonium"
) %>%
brief_entries(
glue::glue("Nobel Prize in {Type}"),
Year,
Desc
)
library(dplyr)
scholar::get_publications("EmD_lTEAAAAJ&EmD_lTEAAAAJ&") %>%
filter(cites > 30) %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number()) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib("curie.bib")
install.packages("scholar")
library(data.table)
library(data.table)
library(multiwayvcov)
library(data.table)
library(multiwayvcov)
library(lmtest)
library(data.table)
library(multiwayvcov)
library(lmtest)
library(pracma)
library(fabricatr)
library(rbenchmark)
library(fixest)
# library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
head(voters)
library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::check("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
library(data.table)
library(multiwayvcov)
library(lmtest)
library(pracma)
library(fabricatr)
library(rbenchmark)
library(fixest)
library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
create_data
1000 * 0.05
50 / 1000
1 / 1000
install.packages(c("data.table", "Formula"))
1 / 1000
0.05 / 1000
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages(c("data.table", "fixest", "knitr", "lfe", "lmtest", "multiwayvcov", "pracma", "rbenchmark"))
library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
#setwd("C:/Users/alexa/Dropbox")
#devtools::install("fwildclusterboot")
#devtools::check("fwildclusterboot")
#devtools::document("fwildclusterboot")
# #
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("data.table", type = "Imports")
#  use_package("estimatr", type = "Imports")
#
#  use_package("fixest", type = "Imports")
#  use_package("magrittr", type = "Suggests")
#  use_package("fabricatr", type = "Suggests")
#  use_package("lmtest", type = "Suggests")
#  use_package("lfe", type = "Suggests")
library(data.table)
library(multiwayvcov)
library(lmtest)
library(pracma)
library(fabricatr)
library(rbenchmark)
library(fixest)
# execute all functions in fwildclusterboot
setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
file.sources = list.files(pattern="*.R")
sapply(file.sources, source, .GlobalEnv)
library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
head(voters)
#setwd("C:/Users/alexa/Dropbox")
#devtools::install("fwildclusterboot")
#devtools::check("fwildclusterboot")
#devtools::document("fwildclusterboot")
# #
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("data.table", type = "Imports")
#  use_package("estimatr", type = "Imports")
#
#  use_package("fixest", type = "Imports")
#  use_package("magrittr", type = "Suggests")
#  use_package("fabricatr", type = "Suggests")
#  use_package("lmtest", type = "Suggests")
#  use_package("lfe", type = "Suggests")
library(data.table)
library(multiwayvcov)
library(lmtest)
library(pracma)
library(fabricatr)
library(rbenchmark)
library(fixest)
# execute all functions in fwildclusterboot
setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
file.sources = list.files(pattern="*.R")
sapply(file.sources, source, .GlobalEnv)
library(fwildclusterboot)
B <- 10000
seed <- 1345671
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.01)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
#res_estimatr_fe = boottest(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
#res_estimatr = boottest(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = #TRUE)
res_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
tic()
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
toc()
summary(res_lm)
#summary(res_estimatr_fe)
#summary(res_estimatr)
summary(res_felm)
summary(res_fixest)
summary(res_fixest1)
feols_fit1$nobs
feols_fit$nobs
is.factor(voters$Q1_immigration)
# NOT RUN {
# two fitted models with different expl. variables:
res1 = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +
Petal.Width | Species, iris)
library(fixest)
# NOT RUN {
# two fitted models with different expl. variables:
res1 = femlm(Sepal.Length ~ Sepal.Width + Petal.Length +
Petal.Width | Species, iris)
# estimation without clusters
res2 = update(res1, . ~ Sepal.Width | 0)
# We export the two results in one Latex table:
esttable(res1, res2)
# With clustered standard-errors + showing the dependent variable
esttable(res1, res2, se = "cluster", cluster = iris$Species, depvar = TRUE)
# Changing the model names + the order of the variables
# + dropping the intercept.
esttable(model_1 = res1, res2,
order = c("Width", "Petal"), drop = "Int",
signifCode = c("**" = 0, "*" = 0.2, "n.s."=1))
# Changing the model names + the order of the variables
# + dropping the intercept.
esttable(model_1 = res1, res2,
order = c("Width", "Petal"), drop = "Pal",
signifCode = c("**" = 0, "*" = 0.2, "n.s."=1))
# Changing the model names + the order of the variables
# + dropping the intercept.
esttable(model_1 = res1, res2,
order = c("Width", "Petal"), drop = "al",
signifCode = c("**" = 0, "*" = 0.2, "n.s."=1))
N <- 100
x <- rnorm(N)
y <- 1 + 2*rnorm(N)+rnorm(N)
df <- data.frame(x = x, y = y)
feols(y~x, data = df)
model_3 <- feols(y~x, data = df)
esttable(model3)
esttable(model_3)
fe <- rep(c("a","b", 50)
y <- 1 + 2*rnorm(N) + ifelse(fe == "a", rnorm(50, 1, 1), rnorm(50, 0, 1)) +rnorm(N)
fe <- rep(c("a","b", 50))
y <- 1 + 2*rnorm(N) + ifelse(fe == "a", rnorm(50, 1, 1), rnorm(50, 0, 1)) +rnorm(N)
fe
fe <- rep(c("a","b"), 50)
y <- 1 + 2*rnorm(N) + ifelse(fe == "a", rnorm(50, 1, 1), rnorm(50, 0, 1)) +rnorm(N)
df <- data.frame(x = x, y = y)
y <- 1 + 2*rnorm(N) + ifelse(fe == "a", rnorm(N / 2, 1, 1), rnorm(N / 2, 0, 1)) +rnorm(N)
df <- data.frame(x = x, y = y)
model_3 <- feols(y~ i(x, fe) + , data = df)
df <- data.frame(x = x, y = y, fe = fe)
model_3 <- feols(y~ i(x, fe) + , data = df)
model_3 <- feols(y~ i(x, fe)  , data = df)
esttable(model_3)
esttable(model_3, drop = "x")
set.seed(123)
N <- 100
x1 <- rnorm(100)
x2 <- rnorm(100)
treatment <- rnorm(100)
outcome <- 2*treatment + 0.1*x1 + 0.2*x2 + rnorm(N)
df <- data.frame(x1 = x1,
x2 = x2,
ax1 = x1,
ax2 = x2,
treatment = treatment,
outcome = outcome)
res <- feols(outcome ~ treatment + x1 + x2, data = df)
esttable(res, drop = "(x)")
res <- feols(outcome ~ treatment + ax1 + ax2, data = df)
esttable(res, drop = "(x)")
esttable(res)
fe <- rep(c("a", "b"), 50)
N <- 100
x <- rnorm(N)
fe <- rep(c("a","b"), N / 2)
y <- 1 + 2*rnorm(N) + ifelse(fe == "a", rnorm(N / 2, 1, 1), rnorm(N / 2, 0, 1)) +rnorm(N)
df <- data.frame(x = x, y = y, fe = fe)
model_3 <- feols(y~ i(x, fe)  , data = df)
esttable(model_3)
esttable(model_3, drop = "x")
library(fixest)
group <- rep(c("a", "b"), N / 2)
x <- rnorm(N)
x_squared <- x^2
y <- 2*x + rnorm(N)
df <- data(x = x, x_squared = x_squared, y = y)
y <- 2*x + rnorm(N)
df <- data(x = x, x_squared = x_squared, y = y)
y <- 2*x + rnorm(N)
df <- data(x = x, x_squared = x_squared, y = y)
df <- data.frame(x = x, x_squared = x_squared, y = y)
df
res <- feols(y ~ i(x, group) + i(x_squared, group), data = df)
df <- data.frame(x = x, x_squared = x_squared, y = y, group = group)
res <- feols(y ~ i(x, group) + i(x_squared, group), data = df)
res
esttable(res)
esttable(res, drop = "x")
esttable(res, drop = "x_")
esttable(res, drop = "x:")
packageVersion("fixest")
tinytex::install_tinytex()
getwd()
