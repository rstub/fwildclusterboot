B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.5)
library(fwildclusterboot)
B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data(N = 10000, N_G = 20, icc = 0.5)
head(voters)
voters <- create_data(N = 10000, N_G = 20, icc = 0.5)
voters <- fwildclusterboot:::create_data(N = 10000, N_G = 20, icc = 0.5)
voters <- create_data_1(N = 10000, N_G = 20, icc = 0.5)
library(fwildclusterboot)
B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 20, icc = 0.5)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
library(fwildclusterboot)
B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 20, icc = 0.5)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
#'@export
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boottest <- function(x, ...){
#'@export
UseMethod("boottest")
}
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
boottest.lm <- function(object,
clustid,
param,
B,
weights = NULL,
conf_int = NULL,
debug = FALSE,
seed = NULL,
beta0 = NULL){
#'@output An object of class boottest
#'@export
#boottest.lm(lm_fit, 1:2000, B = 1000, seed = 1, param = "x2", beta0 = NULL)
# object <- lm_fit
# clustid = voters$group_id
# #B <- 10000
# seed <- 1
# param <- "treatment"
# beta0 <- 0
data <- get_model_frame(object)
if(!is.null(seed)){
set.seed(seed)
} else if(is.null(seed)){
set.seed(2)
}
if(!is.null(object$call$weights)){
stop("Function currently does not allow weights.")
}
# retrieve clusters / multiple clusters
if(inherits(clustid, "formula")) {
clustid_tmp <- expand.model.frame(object, clustid, na.expand = FALSE)
clustid <- model.frame(clustid, clustid_tmp, na.action = na.pass)
} else {
clustid <- as.data.frame(clustid, stringsAsFactors = FALSE)
}
if(!(param %in% c(names(object$coefficients)))){
warning("Parameter to test not in model or all. Please specify appropriate parameters to test.")
}
# how many clustids? uniway/multiway?
clustid_dims <- ncol(clustid)
# Handle omitted or excluded observations
if(!is.null(object$na.action)) {
if(class(object$na.action) == "exclude") {
clustid <- clustid[-object$na.action,]
} else if(class(object$na.action) == "omit") {
clustid <- clustid[-object$na.action,]
}
clustid <- as.data.frame(clustid)  # silly error somewhere
}
#if(debug) print(class(clustid))
if(is.null(beta0)){
beta0 <- 0
}
# Factors in our clustiding variables can potentially cause problems
# Blunt fix is to force conversion to characters
i <- !sapply(clustid, is.numeric)
clustid[i] <- lapply(clustid[i], as.character)
# Make all combinations of clustid dimensions
# if(clustid_dims > 1) {
#   for(i in acc) {
#     clustid <- cbind(clustid, Reduce(paste0, clustid[,i]))
#   }
# }
# start estimation here:
R0 <- as.numeric(param == names(object$coefficients))
groupvars <- names(coef(object))
# if(object_type == "felm"){
#
#   depvar <- names(object$response)
#   Y <- object$response
#   X <- lfe:::model.matrix.felm(felm_fit)
# }
depvar <- all.vars(as.formula(object$call))[1]
#measurevar <- "y"
#formula <- as.formula(paste(measurevar, paste(groupvars, collapse=" + "), sep=" ~ "))
X <- model.matrix(as.formula(object$call), object$model)
Y <- as.matrix(model.frame(object)[, depvar])
#res <- boottest_fun(Y = Y, X = X, R0 = R0, clustid = clustid, B = B, param = param)
N <- length(Y)
k <- ncol(X)
Xr <- X[, -which(R0 == 1)] # delete rows that will be tested
# Yr for constraint leas squares with beta0 = c
Yr <- Y - X[, which(R0 == 1)] * beta0
#Xr1 <- X
#Xr1[, which(R0 == 1)] <- beta0 + Xr1[, which(R0 == 1)]
#clustid <- as.vector(clustid)
#clustid <- rep(1:20, 100)
N_G <- nrow(unique(clustid)) #number of clusters
if(N_G > 2000){
warning(paste("You are estimating a model with more than 200 clusters. Are you sure you want to proceed with bootstrap standard errors instead of asymptotic sandwich standard errors? The more clusters in the data, the longer the estimation process."))
}
#clustid <- clustid$clustid
# error under the null hypothesis
#u_hat <- Y - Xr %*% solve(t(Xr) %*% Xr) %*% t(Xr) %*% Y # N x 1 matrix
u_hat <- Yr - Xr %*% solve(t(Xr) %*% Xr) %*% t(Xr) %*% Yr # N x 1 matrix
#u_hat <- Y - R %*% (Xr %*% solve(t(Xr) %*% Xr) %*% t(Xr) %*% Y) - beta0
invXX <- solve(t(X) %*% X) # k x k matrix
v <- matrix(sample(c(1, -1), N_G * (B + 1), replace = TRUE), N_G, B + 1) # rademacher weights for all replications
v[,1] <- 1
XinvXXr <- X %*% (invXX %*% R0) # N x 1
SXinvXXRu_prep <- data.table::data.table(prod = XinvXXr * matrix(rep(u_hat, 1), N, 1) , clustid = clustid)
SXinvXXRu <- as.matrix(SXinvXXRu_prep[, lapply(.SD, sum), by = "clustid.clustid"][, clustid.clustid := NULL])
if(ncol(SXinvXXRu) == 1){
SXinvXXRu <- as.vector(SXinvXXRu)
}
SXinvXXRX_prep <- data.table::data.table(prod = matrix(rep(XinvXXr, k), N, k) * X, clustid = clustid)
SXinvXXRX <- as.matrix(SXinvXXRX_prep[, lapply(.SD, sum), by = "clustid.clustid"][, clustid.clustid := NULL])
SXu_prep <- data.table::data.table(prod = X * matrix(rep(u_hat, k), N, k), clustid = clustid)
SXu <- as.matrix(SXu_prep[, lapply(.SD, sum), by = "clustid.clustid"][, clustid.clustid := NULL])
numer <- SXinvXXRu %*% v
J <- (diag(SXinvXXRu) - SXinvXXRX  %*% invXX %*% t(SXu)) %*% v
#hypothesis <- c(0, rep(beta0, B))
#hypothesis <- c(beta0, rep(0, B))
t <- abs(numer)  / sqrt(colSums(J * J))    # note: absolute value is taken here - no negative t-stats
t_boot <- t[2:(B + 1)]
#t_conf <- quantile(t_boot, c(0.025, 0.975))
#conf_int <- 2*t[1] - t_conf
#t_boot <- t_boot
#p_val <- mean(abs(t[1]) < abs(t_boot - c(rep(beta0, B))))
p_val <- mean(abs(t[1] - beta0) < (t_boot))
# res <- list(p_val = p_val#,
#             #conf_int = conf_int
#             )
#paste("The wild cluster bootstrap p-value for the parameter", param, "is", p_val, ",", "with B", B,  "bootstrap iterations.")
res  <- list(p_val = p_val, X = X, Y = Y, B = B, R0 = R0, param = param, clustid = clustid)
# Invert p-value
if(is.null(conf_int) || conf_int == TRUE){
conf_int <- invert_p_val_fwc(object, data, clustid, X, Y, param, R0, B, N, k, seed, N_g, invXX, v, Xr, XinvXXr, SXinvXXRX)
res_final <- list(p_val = res[["p_val"]],
conf_int = conf_int,
t_stat = t[1],
regression = object,
param = param,
N = N,
B = B,
clustid = clustid,
depvar = depvar,
N_G = N_G)
} else{
res_final <- list(p_val = res[["p_val"]],
t_stat = t[1],
conf_int = conf_int,
regression = object,
param = param,
N = N,
B = B,
clustid = clustid,
depvar = depvar,
N_G = N_G)
}
class(res_final) <- "boottest"
res_final
}
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# # devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# # devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
library(fwildclusterboot)
B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 20, icc = 0.5)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# # devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
library(fwildclusterboot)
B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 20, icc = 0.5)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
tic()
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
toc()
pracma::tic()
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
pracma::toc()
res_fixest
pracma::tic()
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
pracma::toc()
res_fixest
summary(res_fixest)
boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
summary(res_felm)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
# # devtools::check("fwildclusterboot")
devtools::document("fwildclusterboot")
# #
#  library(usethis)
#  setwd("C:/Users/au563468/Dropbox/fwildclusterboot")
#  use_package("data.table", type = "Imports")
# execute all functions in fwildclusterboot
# setwd("C:/Users/alexa/Dropbox/fwildclusterboot/R")
# file.sources = list.files(pattern="*.R")
# sapply(file.sources, source, .GlobalEnv)
library(fwildclusterboot)
B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 20, icc = 0.5)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
geom_sf(data = railway$osm_lines,
inherit.aes = FALSE,
color = "black",
size = .2,
linetype="dotdash",
alpha = .5) +
res_felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_felm
summary(res_felm)
res_felm
res_fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = TRUE)
res_fixest
summary(res_fixest)
res_fixest$p_val
res_fixest$conf_int
object <- res_fixest
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
estim_function
numb_clusters
object$regression
object$regression$coeftable
res_lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
res_lm
object$regression
object
object$regression$coefficients
tidy.boottest <- function(object, digits = 3){
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
t_stat <- object$t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
#rownames(res) <- NA
print(res, digits = digits)
}
tidy(res_lm)
summary.boottest <- function(object){
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
#if(class(object$regression) %in% c("lm", "lm_robust", "felm")){
#  adj_r_squared <- summary(object$regression)$adj.r.squared
#} else{
#  adj_r_squared <- NA
#}
cat("\t\n",
sprintf("OLS estimation, Dep.Var: %s\n", depvar),
sprintf("Estimation Function: %s\n", estim_function),
sprintf("Observations:%s\n", N),
sprintf("Standard-errors: Clustered  %s\n", ""),
sprintf("Number of Clusters:  %s\n", numb_clusters),
sprintf("Adj. R-Squared: %s\n", round(adj_r_squared,6)),
sprintf("%s\n", ""))
tidy(object)
}
summary(res_lm)
summary.boottest <- function(object){
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
#if(class(object$regression) %in% c("lm", "lm_robust", "felm")){
#  adj_r_squared <- summary(object$regression)$adj.r.squared
#} else{
#  adj_r_squared <- NA
#}
cat("\t\n",
sprintf("OLS estimation, Dep.Var: %s\n", depvar),
sprintf("Estimation Function: %s\n", estim_function),
sprintf("Observations:%s\n", N),
sprintf("Standard-errors: Clustered  %s\n", ""),
sprintf("Number of Clusters:  %s\n", numb_clusters),
#sprintf("Adj. R-Squared: %s\n", round(adj_r_squared,6)),
sprintf("%s\n", ""))
tidy(object)
}
summary(res_lm)
res_lm$clustid
names(res_lm$clustid)
names(voters$group_id)
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
library(fwildclusterboot)
B <- 10000
seed <- 42
set.seed(seed)
voters <- create_data_1(N = 10000, N_G = 20, icc = 0.5)
head(voters)
library(estimatr)
library(lfe)
library(fixest)
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration , weights = NULL, data = voters)
# lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration , weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income , fixef = c("Q1_immigration"), weights = NULL, data = voters)
feols_fit1 <- feols(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration, weights = NULL, data = voters)
felm_fit1 <- felm(proposition_vote ~ treatment + ideology + log_income + Q1_immigration, weights = NULL, data = voters)
lm = boottest(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest1 = boottest(feols_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
summary(res_lm)
summary(res_felm)
summary(res_lm)
summary(res_felm)
summary(res_fixest)
tidy(res_felm)
object <- res_felm
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
estimate
object$regression
object$regression$coefficients
object$regression$coefficients) == object$param
names(object$regression$coefficients) == object$param
object$param
names(object$regression$coefficients)
object$regression$coefficients
class(object$regression)
object$regression$coefficients
estimate <- object$regression$coefficients[rownames(object$regression$coefficients) == object$param]
estimate
t_stat <- object$t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
print(res, digits = digits)
tidy.boottest <- function(object, digits = 3){
if(class(object$regression) == "felm"){
estimate <- object$regression$coefficients[rownames(object$regression$coefficients) == object$param]
} else{
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
}
t_stat <- object$t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
#rownames(res) <- NA
print(res, digits = digits)
}
tidy(res_felm)
summary(res_lm)
summary(res_felm)
summary(res_fixest)
summary(feols_fit, se = "cluster", cluster = "group_id")
tidy(res_lm)
tidy(res_felm)
tidy(res_fixest)
install.packages("rlang")
install.packages("rlang")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
library(data.table)
install.packages("data.table")
install.packages("data.table")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
devtools::install("fwildclusterboot")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
install.packages("fixest")
install.packages("fixest")
setwd("C:/Users/alexa/Dropbox")
devtools::install("fwildclusterboot")
.libPaths()
