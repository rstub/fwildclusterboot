}
summary.boottest <- function(object){
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
if(class(object$regression) %in% c("lm", "lm_robust", "felm")){
adj_r_squared <- summary(lm_fit)$adj.r.squared
} else{
adj_r_squared <- NA
}
cat("\t\n",
sprintf("OLS estimation, Dep.Var: %s\n", depvar),
sprintf("Estimation Function: %s\n", estim_function),
sprintf("Observations:%s\n", N),
sprintf("Standard-errors: Clustered  %s\n", ""),
sprintf("Number of Clusters:  %s\n", numb_clusters),
sprintf("Adj. R-Squared: %s\n", round(adj_r_squared,6)),
sprintf("%s\n", ""))
tidy(object)
}
summary(res_lm)
#summary(res_estimatr_fe)
#summary(res_estimatr)
summary(res_felm)
summary(res_fixest)
summary(res_lm)
tidy.boottest <- function(object){
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
t_stat <- object$t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
rownames(res) <- param
print(res, digits = 4)
}
summary.boottest <- function(object){
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
if(class(object$regression) %in% c("lm", "lm_robust", "felm")){
adj_r_squared <- summary(lm_fit)$adj.r.squared
} else{
adj_r_squared <- NA
}
cat("\t\n",
sprintf("OLS estimation, Dep.Var: %s\n", depvar),
sprintf("Estimation Function: %s\n", estim_function),
sprintf("Observations:%s\n", N),
sprintf("Standard-errors: Clustered  %s\n", ""),
sprintf("Number of Clusters:  %s\n", numb_clusters),
sprintf("Adj. R-Squared: %s\n", round(adj_r_squared,6)),
sprintf("%s\n", ""))
tidy(object)
}
summary(res_lm)
object <- res_lm
object$regression$coefficients[names(object$regression$coefficients) == object$param]
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
t_stat <- object$t_stat
t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
rownames(res) <- param
print(res, digits = 4)
param
res
tidy.boottest <- function(object){
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
t_stat <- object$t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
#rownames(res) <- param
print(res, digits = 4)
}
summary.boottest <- function(object){
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
if(class(object$regression) %in% c("lm", "lm_robust", "felm")){
adj_r_squared <- summary(lm_fit)$adj.r.squared
} else{
adj_r_squared <- NA
}
cat("\t\n",
sprintf("OLS estimation, Dep.Var: %s\n", depvar),
sprintf("Estimation Function: %s\n", estim_function),
sprintf("Observations:%s\n", N),
sprintf("Standard-errors: Clustered  %s\n", ""),
sprintf("Number of Clusters:  %s\n", numb_clusters),
sprintf("Adj. R-Squared: %s\n", round(adj_r_squared,6)),
sprintf("%s\n", ""))
tidy(object)
}
summary(res_lm)
#summary(res_estimatr_fe)
#summary(res_estimatr)
summary(res_felm)
summary(res_fixest)
summary(res_lm)
summary(res_felm)
summary(res_fixest)
res_felm
object <- res_felm
object$regression
res_felm$regression
estimate <- object$regression$[names(object$regression) == object$param]
estimate <- object$regression[names(object$regression) == object$param]
estimate
object$regression
names(object$regression) == object$param
names(object$regression)
names(object$regression$coefficients)
object$coefficients
object
object$regression$coefficients
object$regression[colnames(object$regression$coefficients) == object$param]
colnames(object$regression$coefficients) == object$param
rownames(object$regression$coefficients) == object$param
object$regression$coefficients[rownames(object$regression$coefficients) == object$param]
tidy.boottest <- function(object){
stopifnot(inherits(object, "boottest"))
if(class(object) %in% c("lm", "lm_robust", "fixest")){
estimate <- object$regression$coefficients[names(object$regression$coefficients) == object$param]
} else {
estimate <- object$regression$coefficients[rownames(object$regression$coefficients) == object$param]
}
t_stat <- object$t_stat
p_val <- object$p_val
conf_int_lower <- min(object$conf_int)
conf_int_upper <- max(object$conf_int)
res <- data.frame(estimate, t_stat, p_val, conf_int_lower, conf_int_upper)
colnames(res) <- c("Estimate", "t value", "Pr(>|t|)", "CI Lower", "CI Upper")
#rownames(res) <- param
print(res, digits = 4)
}
summary.boottest <- function(object){
stopifnot(inherits(object, "boottest"))
N <- object$N
B <- object$B
depvar <- object$depvar
#clustid <-
estim_function <- class(object$regression)
numb_clusters <- object$N_G
if(class(object$regression) %in% c("lm", "lm_robust", "felm")){
adj_r_squared <- summary(lm_fit)$adj.r.squared
} else{
adj_r_squared <- NA
}
cat("\t\n",
sprintf("OLS estimation, Dep.Var: %s\n", depvar),
sprintf("Estimation Function: %s\n", estim_function),
sprintf("Observations:%s\n", N),
sprintf("Standard-errors: Clustered  %s\n", ""),
sprintf("Number of Clusters:  %s\n", numb_clusters),
sprintf("Adj. R-Squared: %s\n", round(adj_r_squared,6)),
sprintf("%s\n", ""))
tidy(object)
}
summary(res_felm)
test_file('C:\Users\au563468\Dropbox\fwildclusterboot\tests\testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_that("test if results of boottest are similar to each results by sandwich se", {
B <- 100000
voters <- fabricatr::fabricate(
N = 10000,
group_id = rep(1:100, 100),
ideology = draw_normal_icc(mean = 0, N = N, clusters = group_id, ICC = 0.01),
ideological_label = draw_ordered(
x = ideology,
break_labels = c(
"Very Conservative", "Conservative",
"Liberal", "Very Liberal"
)
),
income = exp(rlnorm(n = N, meanlog = 2.4 - (ideology * 0.1), sdlog = 0.12)),
Q1_immigration = draw_likert(x = ideology, type = 7),
Q2_defence = draw_likert(x = ideology + 0.5, type = 7),
treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
data.table::setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
# estimate regressions
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
# estimate benchmark regression
lm_robust_sandwich <-   lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id )
p_val <-  lm_robust_sandwich$p.value["treatment"]
# calculate p-values with fast bootstrap
lm = boottest.lm(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest.lm_robust(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest.lm_robust(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest.felm(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest.fixest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# test
expect_equivalent(lm$p_val, p_val, tolerance = 0.001)
expect_equivalent(estimatr$p_val, p_val, tolerance = 0.001)
expect_equivalent(estimatr_fe$p_val, p_val, tolerance = 0.001)
expect_equivalent(felm$p_val, p_val, tolerance = 0.001)
expect_equivalent(fixest$p_val, p_val, tolerance = 0.001)
})
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_that("test if results of boottest are similar to each results by sandwich se", {
B <- 100000
voters <- fabricatr::fabricate(
N = 10000,
group_id = rep(1:100, 100),
ideology = draw_normal_icc(mean = 0, N = N, clusters = group_id, ICC = 0.01),
ideological_label = draw_ordered(
x = ideology,
break_labels = c(
"Very Conservative", "Conservative",
"Liberal", "Very Liberal"
)
),
income = exp(rlnorm(n = N, meanlog = 2.4 - (ideology * 0.1), sdlog = 0.12)),
Q1_immigration = draw_likert(x = ideology, type = 7),
Q2_defence = draw_likert(x = ideology + 0.5, type = 7),
treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
data.table::setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
# estimate regressions
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
# estimate benchmark regression
lm_robust_sandwich <-   lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id )
p_val <-  lm_robust_sandwich$p.value["treatment"]
# calculate p-values with fast bootstrap
lm = boottest.lm(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest.lm_robust(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest.lm_robust(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest.felm(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest.fixest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# test
expect_equivalent(lm$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr_fe$p_val, p_val, tolerance = 0.01)
expect_equivalent(felm$p_val, p_val, tolerance = 0.01)
expect_equivalent(fixest$p_val, p_val, tolerance = 0.01)
})
B <- 100000
voters <- fabricatr::fabricate(
N = 10000,
group_id = rep(1:100, 100),
ideology = draw_normal_icc(mean = 0, N = N, clusters = group_id, ICC = 0.01),
ideological_label = draw_ordered(
x = ideology,
break_labels = c(
"Very Conservative", "Conservative",
"Liberal", "Very Liberal"
)
),
income = exp(rlnorm(n = N, meanlog = 2.4 - (ideology * 0.1), sdlog = 0.12)),
Q1_immigration = draw_likert(x = ideology, type = 7),
Q2_defence = draw_likert(x = ideology + 0.5, type = 7),
treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
data.table::setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
# estimate benchmark regression
lm_robust_sandwich <-   lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id )
p_val <-  lm_robust_sandwich$p.value["treatment"]
# calculate p-values with fast bootstrap
lm = boottest.lm(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest.lm_robust(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest.lm_robust(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest.felm(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest.fixest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# test
expect_equivalent(lm$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr_fe$p_val, p_val, tolerance = 0.01)
expect_equivalent(felm$p_val, p_val, tolerance = 0.01)
expect_equivalent(fixest$p_val, p_val, tolerance = 0.01)
test_that("test if results of boottest are similar to each results by sandwich se", {
B <- 100000
voters <- fabricatr::fabricate(
N = 10000,
group_id = rep(1:100, 100),
ideology = draw_normal_icc(mean = 0, N = N, clusters = group_id, ICC = 0.01),
ideological_label = draw_ordered(
x = ideology,
break_labels = c(
"Very Conservative", "Conservative",
"Liberal", "Very Liberal"
)
),
income = exp(rlnorm(n = N, meanlog = 2.4 - (ideology * 0.1), sdlog = 0.12)),
Q1_immigration = draw_likert(x = ideology, type = 7),
Q2_defence = draw_likert(x = ideology + 0.5, type = 7),
treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
data.table::setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
# estimate regressions
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
# estimate benchmark regression
lm_robust_sandwich <-   lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id )
p_val <-  lm_robust_sandwich$p.value["treatment"]
# calculate p-values with fast bootstrap
lm = boottest.lm(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest.lm_robust(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest.lm_robust(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest.felm(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest.fixest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# test
expect_equivalent(lm$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr_fe$p_val, p_val, tolerance = 0.01)
expect_equivalent(felm$p_val, p_val, tolerance = 0.01)
expect_equivalent(fixest$p_val, p_val, tolerance = 0.01)
})
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
set.seed(102)
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_file('C:/Users/au563468/Dropbox/fwildclusterboot/tests/testthat.R')
test_that("test if results of boottest are similar to each results by sandwich se", {
B <- 100000
voters <- fabricatr::fabricate(
N = 10000,
group_id = rep(1:100, 100),
ideology = draw_normal_icc(mean = 0, N = N, clusters = group_id, ICC = 0.01),
ideological_label = draw_ordered(
x = ideology,
break_labels = c(
"Very Conservative", "Conservative",
"Liberal", "Very Liberal"
)
),
income = exp(rlnorm(n = N, meanlog = 2.4 - (ideology * 0.1), sdlog = 0.12)),
Q1_immigration = draw_likert(x = ideology, type = 7),
Q2_defence = draw_likert(x = ideology + 0.5, type = 7),
treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
data.table::setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
# estimate regressions
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
# estimate benchmark regression
lm_robust_sandwich <-   lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id )
p_val <-  lm_robust_sandwich$p.value["treatment"]
# calculate p-values with fast bootstrap
lm = boottest.lm(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest.lm_robust(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest.lm_robust(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest.felm(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest.fixest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# test
expect_equivalent(lm$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr_fe$p_val, p_val, tolerance = 0.01)
expect_equivalent(felm$p_val, p_val, tolerance = 0.01)
#expect_equivalent(fixest$p_val, p_val, tolerance = 0.01)
})
sample(1:1000)
seed <- sample(1,1:1000)
seed
test_that("test if results of boottest are similar to each results by sandwich se", {
seed <- sample(1:1000, 1)
set.seed(seed)
B <- 100000
voters <- fabricatr::fabricate(
N = 10000,
group_id = rep(1:100, 100),
ideology = draw_normal_icc(mean = 0, N = N, clusters = group_id, ICC = 0.01),
ideological_label = draw_ordered(
x = ideology,
break_labels = c(
"Very Conservative", "Conservative",
"Liberal", "Very Liberal"
)
),
income = exp(rlnorm(n = N, meanlog = 2.4 - (ideology * 0.1), sdlog = 0.12)),
Q1_immigration = draw_likert(x = ideology, type = 7),
Q2_defence = draw_likert(x = ideology + 0.5, type = 7),
treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
data.table::setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
# estimate regressions
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
# estimate benchmark regression
lm_robust_sandwich <-   lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id )
p_val <-  lm_robust_sandwich$p.value["treatment"]
# calculate p-values with fast bootstrap
lm = boottest.lm(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest.lm_robust(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest.lm_robust(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest.felm(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest.fixest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# test
expect_equivalent(lm$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr_fe$p_val, p_val, tolerance = 0.01)
expect_equivalent(felm$p_val, p_val, tolerance = 0.01)
expect_equivalent(fixest$p_val, p_val, tolerance = 0.01)
})
class(fixest)
class(fixest_fot)
seed <- sample(1:1000, 1)
set.seed(seed)
B <- 100000
voters <- fabricatr::fabricate(
N = 10000,
group_id = rep(1:100, 100),
ideology = draw_normal_icc(mean = 0, N = N, clusters = group_id, ICC = 0.01),
ideological_label = draw_ordered(
x = ideology,
break_labels = c(
"Very Conservative", "Conservative",
"Liberal", "Very Liberal"
)
),
income = exp(rlnorm(n = N, meanlog = 2.4 - (ideology * 0.1), sdlog = 0.12)),
Q1_immigration = draw_likert(x = ideology, type = 7),
Q2_defence = draw_likert(x = ideology + 0.5, type = 7),
treatment = draw_binary(0.5, N = N),
proposition_vote = draw_binary(latent = ideology + 0.01 * treatment, link = "probit")
)
data.table::setDT(voters)
voters[, log_income := log(income)]
voters[, Q1_immigration := as.factor(Q1_immigration) ]
voters[, Q2_defence := as.factor(Q2_defence)]
lm_fit <- lm(proposition_vote ~ treatment + ideology + log_income +Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit <- lm_robust(proposition_vote ~ treatment + ideology + log_income, fixed_effects = ~ Q1_immigration + Q2_defence, weights = NULL, data = voters)
lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters )
feols_fit <- feols(proposition_vote ~ treatment + ideology + log_income, fixef = c("Q1_immigration", "Q2_defence"), weights = NULL, data = voters)
felm_fit <- felm(proposition_vote ~ treatment + ideology + log_income | Q1_immigration + Q2_defence, weights = NULL, data = voters)
# estimate benchmark regression
lm_robust_sandwich <-   lm_robust_fit1 <- lm_robust(proposition_vote ~ treatment + ideology + log_income + Q1_immigration + Q2_defence, weights = NULL, data = voters, clusters = voters$group_id )
p_val <-  lm_robust_sandwich$p.value["treatment"]
# calculate p-values with fast bootstrap
lm = boottest.lm(lm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr_fe = boottest.lm_robust(lm_robust_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
estimatr = boottest.lm_robust(lm_robust_fit1, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
felm = boottest.felm(felm_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
fixest = boottest.fixest(feols_fit, clustid = voters$group_id, B = B, seed = seed, param = "treatment", conf_int = FALSE)
# test
expect_equivalent(lm$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr$p_val, p_val, tolerance = 0.01)
expect_equivalent(estimatr_fe$p_val, p_val, tolerance = 0.01)
expect_equivalent(felm$p_val, p_val, tolerance = 0.01)
felm$p_val
p_val
estimatr_fe$p_val
