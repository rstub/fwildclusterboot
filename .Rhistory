dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(as.matrix(values), unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
crosstab3 <- function(data, var1, var2){
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
data <- as.vector(data)
collapse_vars <- add_vars(var1, var2)
potential_grid <- expand.grid(var1 = unique_var1, var2 = unique_var2)
grid <- unique(collapse_vars)
grid1 <- paste0(grid[, 1], "-", grid[, 2])
potential_grid1 <- paste0(potential_grid[, 1], "-", potential_grid[, 2])
# c("a", "b", "a", "d") %in% c("a", "b")
missing_grid <- potential_grid1 %in% grid1
missing_grid1 <- which(!missing_grid, FALSE)
add_grid <- potential_grid[missing_grid1,]
add_zeros <- nrow(add_grid)
data <- c(data, rep(0, add_zeros))
names(add_grid) <- names(collapse_vars)
full_grid <- data.table::rbindlist(collapse_vars, add_grid)
res <- fsum(x = data, g = full_grid)
dim(res) <- c(unique_var1_len, unique_var2_len)
res
}
crosstab2<- function(data, var1, var2){
# data = XinvXXr
# var1 = clustid
# var2 = fixed_effect
dt <- data.table(var1 = var1, var2 = var2, y = data)
setnames(dt, names(dt), c("var1", "var2", "y"))
setkeyv(dt, c("var1", "var2"))
dt <- dt[CJ(var1, var2, unique = TRUE), lapply(.SD, sum), by = .EACHI]
dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(as.matrix(values), unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
crosstab3 <- function(data, var1, var2){
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
data <- as.vector(data)
collapse_vars <- add_vars(var1, var2)
potential_grid <- expand.grid(var1 = unique_var1, var2 = unique_var2)
grid <- unique(collapse_vars)
grid1 <- paste0(grid[, 1], "-", grid[, 2])
potential_grid1 <- paste0(potential_grid[, 1], "-", potential_grid[, 2])
# c("a", "b", "a", "d") %in% c("a", "b")
missing_grid <- potential_grid1 %in% grid1
missing_grid1 <- which(!missing_grid, FALSE)
add_grid <- potential_grid[missing_grid1,]
add_zeros <- nrow(add_grid)
data <- c(data, rep(0, add_zeros))
names(add_grid) <- names(collapse_vars)
full_grid <- data.table::rbindlist(list(collapse_vars, add_grid))
res <- fsum(x = data, g = full_grid)
dim(res) <- c(unique_var1_len, unique_var2_len)
res
}
crosstab2<- function(data, var1, var2){
# data = XinvXXr
# var1 = clustid
# var2 = fixed_effect
dt <- data.table(var1 = var1, var2 = var2, y = data)
setnames(dt, names(dt), c("var1", "var2", "y"))
setkeyv(dt, c("var1", "var2"))
dt <- dt[CJ(var1, var2, unique = TRUE), lapply(.SD, sum), by = .EACHI]
dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(as.matrix(values), unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
crosstab3 <- function(data, var1, var2){
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
data <- as.vector(data)
collapse_vars <- add_vars(var1, var2)
potential_grid <- expand.grid(var1 = unique_var1, var2 = unique_var2)
grid <- unique(collapse_vars)
grid1 <- paste0(grid[, 1], grid[, 2])
potential_grid1 <- paste0(potential_grid[, 1], "-", potential_grid[, 2])
# c("a", "b", "a", "d") %in% c("a", "b")
missing_grid <- potential_grid1 %in% grid1
missing_grid1 <- which(!missing_grid, FALSE)
add_grid <- potential_grid[missing_grid1,]
add_zeros <- nrow(add_grid)
data <- c(data, rep(0, add_zeros))
names(add_grid) <- names(collapse_vars)
full_grid <- data.table::rbindlist(list(collapse_vars, add_grid))
res <- fsum(x = data, g = full_grid)
dim(res) <- c(unique_var1_len, unique_var2_len)
res
}
crosstab2<- function(data, var1, var2){
# data = XinvXXr
# var1 = clustid
# var2 = fixed_effect
dt <- data.table(var1 = var1, var2 = var2, y = data)
setnames(dt, names(dt), c("var1", "var2", "y"))
setkeyv(dt, c("var1", "var2"))
dt <- dt[CJ(var1, var2, unique = TRUE), lapply(.SD, sum), by = .EACHI]
dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(as.matrix(values), unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
crosstab3 <- function(data, var1, var2){
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
data <- as.vector(data)
collapse_vars <- add_vars(var1, var2)
potential_grid <- expand.grid(var1 = unique_var1, var2 = unique_var2)
grid <- unique(collapse_vars)
grid1 <- paste0(grid[, 1], grid[, 2])
potential_grid1 <- paste0(potential_grid[, 1], "-", potential_grid[, 2])
# c("a", "b", "a", "d") %in% c("a", "b")
missing_grid <- potential_grid1 %in% grid1
missing_grid1 <- which(!missing_grid, FALSE)
add_grid <- potential_grid[missing_grid1,]
add_zeros <- nrow(add_grid)
data <- c(data, rep(0, add_zeros))
names(add_grid) <- names(collapse_vars)
full_grid <- data.table::rbindlist(list(collapse_vars, add_grid))
res <- fsum(x = data, g = full_grid)
dim(res) <- c(unique_var1_len, unique_var2_len)
res
}
crosstab2<- function(data, var1, var2){
# data = XinvXXr
# var1 = clustid
# var2 = fixed_effect
dt <- data.table(var1 = var1, var2 = var2, y = data)
setnames(dt, names(dt), c("var1", "var2", "y"))
setkeyv(dt, c("var1", "var2"))
dt <- dt[CJ(var1, var2, unique = TRUE), lapply(.SD, sum), by = .EACHI]
dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(as.matrix(values), unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
microbenchmark(
crosstab(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2),
crosstab2(data = as.matrix(XinvXXr), var1 = var1, var2 = var2),
crosstab3(data = as.matrix(XinvXXr), var1 = var1, var2 = var2)
)
microbenchmark(
crosstab(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2),
crosstab2(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2),
crosstab3(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2)
)
crosstab2<- function(data, var1, var2){
# data = XinvXXr
# var1 = clustid
# var2 = fixed_effect
dt <- data.table(var1 = var1, var2 = var2, y = data)
setnames(dt, names(dt), c("var1", "var2", "y"))
setkeyv(dt, c("var1", "var2"))
dt <- dt[CJ(var1, var2, unique = TRUE), lapply(.SD, sum), by = .EACHI]
dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(values, unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
microbenchmark(
crosstab(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2),
crosstab2(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2),
crosstab3(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2)
)
crosstab3 <- function(data, var1, var2){
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
data <- as.vector(data)
collapse_vars <- add_vars(var1, var2)
potential_grid <- expand.grid(var1 = unique_var1, var2 = unique_var2)
grid <- unique(collapse_vars)
grid1 <- paste0(grid[, 1], grid[, 2])
potential_grid1 <- paste0(potential_grid[, 1], potential_grid[, 2])
# c("a", "b", "a", "d") %in% c("a", "b")
missing_grid <- potential_grid1 %in% grid1
missing_grid1 <- which(!missing_grid, FALSE)
add_grid <- potential_grid[missing_grid1,]
add_zeros <- nrow(add_grid)
data <- c(data, rep(0, add_zeros))
names(add_grid) <- names(collapse_vars)
full_grid <- data.table::rbindlist(list(collapse_vars, add_grid))
res <- fsum(x = data, g = full_grid)
dim(res) <- c(unique_var1_len, unique_var2_len)
res
}
crosstab2<- function(data, var1, var2){
# data = XinvXXr
# var1 = clustid
# var2 = fixed_effect
dt <- data.table(var1 = var1, var2 = var2, y = data)
setnames(dt, names(dt), c("var1", "var2", "y"))
setkeyv(dt, c("var1", "var2"))
dt <- dt[CJ(var1, var2, unique = TRUE), lapply(.SD, sum), by = .EACHI]
dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(values, unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
crosstab3 <- function(data, var1, var2){
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
data <- as.vector(data)
collapse_vars <- add_vars(var1, var2)
potential_grid <- expand.grid(var1 = unique_var1, var2 = unique_var2)
grid <- unique(collapse_vars)
grid1 <- paste0(grid[, 1], "-", grid[, 2])
potential_grid1 <- paste0(potential_grid[, 1], "-", potential_grid[, 2])
# c("a", "b", "a", "d") %in% c("a", "b")
missing_grid <- potential_grid1 %in% grid1
missing_grid1 <- which(!missing_grid, FALSE)
add_grid <- potential_grid[missing_grid1,]
add_zeros <- nrow(add_grid)
data <- c(data, rep(0, add_zeros))
names(add_grid) <- names(collapse_vars)
full_grid <- data.table::rbindlist(list(collapse_vars, add_grid))
res <- fsum(x = data, g = full_grid)
dim(res) <- c(unique_var1_len, unique_var2_len)
res
}
crosstab2<- function(data, var1, var2){
# data = XinvXXr
# var1 = clustid
# var2 = fixed_effect
dt <- data.table(var1 = var1, var2 = var2, y = data)
setnames(dt, names(dt), c("var1", "var2", "y"))
setkeyv(dt, c("var1", "var2"))
dt <- dt[CJ(var1, var2, unique = TRUE), lapply(.SD, sum), by = .EACHI]
dt[is.na(y), y:=0]
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
matrix(dt$y, unique_var1_len, unique_var2_len)
}
crosstab<- function(data, var1, var2){
# data <- dt
# var1 <- "a"
# var2 <- "b"
# data <- XinvXXr
# var1 = clustid
# var2 = fixed_effect
unique_var1 <- as.vector(unique(var1[, names(var1)]))
unique_var2 <- unique(var2)
unique_var1_len <- length(unique_var1)
unique_var2_len <- length(unique_var2)
df <- expand.grid(unique_var1, unique_var2)
# create rownames as collapse::fsum
df <- data.frame(names = paste0(df[, 1], ".", df[, 2]))
setDT(df)
res <- fsum(data, cbind(var1,var2))
res_dt <- data.table(names = rownames(res), values = res)
final <- merge(df, res_dt, by = "names", all.x = TRUE)
values <- final[, names:=NULL]
values <- matrix(values, unique_var1_len, unique_var2_len)
values[is.na(values)] <- 0
values
}
microbenchmark(
crosstab(data = XinvXXr, var1 = var1, var2 = var2),
crosstab2(data = XinvXXr, var1 = var1, var2 = var2),
crosstab3(data = XinvXXr, var1 = var1, var2 = var2)
)
microbenchmark(
crosstab(data = as.matrix(W %*% u_hat), var1 = var1, var2 = var2),
crosstab2(data = as.matrix(XinvXXr), var1 = var1, var2 = var2),
crosstab3(data = as.matrix(XinvXXr), var1 = var1, var2 = var2)
)
